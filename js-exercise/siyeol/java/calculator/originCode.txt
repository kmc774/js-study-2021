package calculator;

import java.util.*;

import calculator.command.Operator;
import calculator.command.Input;
import calculator.inputimple.CancelInput;
import calculator.inputimple.ConsoleInput;
import calculator.operatorimple.DivisionOperator;
import calculator.inputimple.FileInput;
import calculator.operatorimple.MultiplyOperator;
import calculator.operatorimple.PlusOperator;
import calculator.operatorimple.SubtractOperator;
import calculator.exception.OperandException;
import calculator.exception.OperatorException;
import org.jetbrains.annotations.NotNull;

public class Calculator {
	
	Map<String, CalculateCommand> operatorMap;	//RemoteControl 객체가 생성될 때 같이 연산 객체들도 같이 생성된다
	Map<String, Input> inputMap;
	

	
	public Calculator() {
		//연산자
		operatorMap = new HashMap<>();
		operatorMap.put("+", new PlusCalculateCommand());
		operatorMap.put("-", new SubtractCalculateCommand());
		operatorMap.put("*", new MultiplyCalculateCommand());
		operatorMap.put("/", new DivisionCalculateCommand());
		//입력 방식
		inputMap = new HashMap<>();
		inputMap.put("1", new InputConsole());
		inputMap.put("2", new InputFile());
		inputMap.put("3", new InputCancel());
		
	}
	
	public void startCalculator() {
		// 커맨드 입력받기
		waitForUserInput();

		// 입력식 입력받기
		//TODO: 콘솔 혹은 파일로부터 입력


		// 계산하기.
		//TODO: 위에서 입력받은 표현식으로 계산.


	}

	private void waitForUserInput(){
		while(true) {
			String userCommand = readUserCommand();

			if( "q".equals(userCommand) ) {
				System.out.println("== 계산기 종료! ==");
				System.exit(-1);
			}

			String expression = readExpression(userCommand);

			int result = calculate(expression);
			System.out.println("result = " +  result);

		}

	}

	/**
	 * 1 : 콘솔
	 * 2 : 파일선택
	 * 3 : 종료
	 */
	String readUserCommand(){

		System.out.println("1: 콘솔, 2: 파일선택, q: 종료");
		System.out.print("-> ");
		Scanner scan = new Scanner(System.in);
		String userCommand = scan.nextLine().replaceAll("\\p{Z}+|\\p{Z}+$", "");

		return userCommand;
	}

	private String readExpression(String inputSourceType){
		//1 이라면, 콘솔에서 입력
		//2 라면, 파일에서 입력.
		String formula = inputMap.get(inputSourceType).input();
		return formula;
	}

	private int calculate(String expression){
		try {
			ParsedExpression parsedExpression = parse(expression);
			return doCompute( parsedExpression );
		}catch (OperatorException | OperandException e){
			throw new RuntimeException(e);
		}
	}



	private ParsedExpression parse(String formula) {	//연산자와 피연사자를 분리해 Map으로 반환

		Iterator<String> it =  operatorMap.keySet().iterator();
		while(it.hasNext()){
			String operater = it.next();
			if (formula.indexOf(operater) > -1) {    //나중에 에러로 처리 (연산자가 있는지 확인)
				String operator = formula.substring(formula.indexOf(operater), formula.indexOf(operater) + 1);
				int operand1 = Integer.parseInt(formula.substring(0, formula.indexOf(operater)));
				int operand2 = Integer.parseInt(formula.substring(formula.indexOf(operater) + 1));

				ParsedExpression parsedExpression = new ParsedExpression(operator, operand1, operand2);
				return parsedExpression;
			}
		}


		throw new OperatorException("연산자를 입력하지 않았거나 정의된 연산자가 아닙니다.");

//		if( resultMap.get("x").equals("") || resultMap.get("y").equals("") ){
//			throw new OperandException("계산될 수들을 정확히 입력해 주세요.");
//		}
//		if( resultMap.get("sign").equals("") ) {
//			throw new OperatorException("연산자를 입력하지 않았거나 정의된 연산자가 아닙니다.");
//		}

	}
	
	private int doCompute(ParsedExpression parsedExpression) {	//command 패턴을 이용한 계산 메서드
		CalculateCommand command = operatorMap.get(parsedExpression.operator);
		return command.compute(parsedExpression.operands[0], parsedExpression.operands[1]);
	}

	class ParsedExpression {
		String operator;
		int[] operands;

		public ParsedExpression(String operator, int operand1,int operand2 ){
			this.operator = operator;
			this.operands = new int[]{operand1, operand2};

		}
	}
}
