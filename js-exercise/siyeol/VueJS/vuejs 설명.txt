Vue 인스턴스
- Vue 인스턴스가 생성될 때 data 객체에 있는 모든 속성이 Vue의 반응형 시스템에 추가된다.
- data 객체에 있는 속성만 반응형 시스템에 추가되기 때문에 새 속성으로 추가된것은 변경되어도 
  화면이 갱신되지 않는다.
- Object.freeze()를 사용할 경우 기존 속성도 변경되는것을 막는다.
- Vue의 인스턴스에는 다양한 인스턴스 속성 및 메소드를 제공하고, 다른 사용자 정의 속성과 구분하기 위해 $를 접두어로 사용한다.



템플릿 문법
- v-html을 이용하여 html 문법을 적용시킬 수 있다.( XSS 취약점으로 사용을 지양한다. )
- html 속성을 사용할 때는 v-bind 디렉티브를 사용한다.( <div v-bind:id="dynamicId"></div> )  
  ( v-bind:disabled="" )를 사용하면 boolean값으로 태그의 동작 여부를 정할 수 있다.
- Vue.js에서는 JS표현식 사용이 가능하다. ( 각 바인딩에 하나의 단일 표현식만 포함 할 수 있다 )
    <!-- 아래는 구문입니다, 표현식이 아닙니다. -->
    {{ var a = 1 }}

    <!-- 조건문은 작동하지 않습니다. 삼항 연산자를 사용해야 합니다. -->
    {{ if (ok) { return message } }} 
- Math와 Date 같은 전역으로 사용 가능한 것에만 접근가능

- 전달인자 : 디렉티브 뒤에 콜론으로 표시 ( <a v-bind:href="url"> ... </a> )
- 2.6.0버전부터 Javascript 표현식을 대괄호로 묶어 디렉티브 의 아규멘트로 사용하는것도 가능해졌다.
  ( <a v-bind:[attributeName]="url"> ... </a> )

- 동적 전달인자 형식의 제약 : 스페이스와 따옴표같은 몇몇 문자는 html 속성명으로 적합하지않아 사용이 제약됩니다.
  ( <a v-bind:['foo' + bar]="value"> ... </a> )   
- 이를 피하기위해 제약된 문자를 사용하지 않거나, 표현식으로 계산된 속성(Computed)으로 대체한다.
- in-DOM 탬플릿을 사용할 경우 브라우저가 모든 속성명을 소문자로 만들기 때문에 대문자 사용은 피한다.

- 수식어 : 점으로 표현되는 특수 접미사로 디렉티브를 특별한 방법으로 바인딩해야된다는걸 나타낸다.
  ( <form v-on:submit.prevent="onSubmit"> ... </form> )

- 약어 : v-bind와 v-on에 대해 약어를 제공한다.
    <!-- v-bind -->
    a :href="url"> ... </a>

    <!-- v-on -->
    <a @click="doSomething"> ... </a>



computed와 watch
- computed와 메소드의 차이점 : computed 속성은 종속 대상을 따라 캐싱 되어서 종속된 대상이 변경될 때만 함수를 실행한다.
                              그렇기 때문에 computed 속성을 여러번 호출해도 다시 계산하지 않고 계산된 결과를 반환한다.
                              캐싱을 원하지 않는 경우 메소드를 사용해야한다.
( *Date.now()처럼 아무 곳에도 의존하지 않는 computed 속성의 경우 절대로 업데이트되지 않는다 )

- computed와 watch의 차이 
    ㄴcomputed : 반응형 getter이다.
                 ( 일반 getter처럼 계산결과가 캐싱되서 getter의 속한 프로퍼티가 변하게 되어도 캐싱때문에 변경된 값을 인지 못하지 않고,
                 getter 함수 내에 속한 프로퍼티의 변경여부를 감시하여 변경되었을때 다시 계산한다. )
    
    ㄴwatch : 반응형 콜백
              ( Vue 인스턴스의 특정 프로퍼티가 변경될때 지정한 콜백함수가 실행된다. )
              대부분의 경우 computed 속성을 사용하지만, 데이터 변경에 대한 응답이 비동기식 또는 시간이 많이 소요되는 조작일 경우 유용하다








